# -*- coding: utf-8 -*-
"""Copy of Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rVMi88hoCEErf08fbqddjpoz4EfKuig9

Netwokr packet (in/out)

Decsion Tree Alg  Pre-Attack ,During Attack and Post-Attack Phase for Network Traffic
"""

import pandas as pd
import matplotlib.pyplot as plt

# Data for network in/out
data_network = {
    "Timestamp": [
        "03-12-2024 11:30", "03-12-2024 11:35", "03-12-2024 11:40", "03-12-2024 11:45",
        "03-12-2024 11:50", "03-12-2024 11:55", "03-12-2024 12:00", "03-12-2024 12:05",
        "03-12-2024 12:10", "03-12-2024 12:15", "03-12-2024 12:20", "03-12-2024 12:25",
        "03-12-2024 12:30"
    ],
    "Network In bytes": [33565, 44834.5, 2576600, 210098, 44834.5, 2576600, 2468991.6, 37232.8, 20750.2, 146272.8, 192, 391.2, 156],
    "Network Out bytes": [412200, 422245.5, 42310.50, 43400, 44952.75, 413017.2, 310474, 37019.6, 20521.2, 144199.4, 249.6, 353.4, 213.6]
}

# Convert the data to a DataFrame
df_network = pd.DataFrame(data_network)

# Convert 'Timestamp' to datetime format
df_network['Timestamp'] = pd.to_datetime(df_network['Timestamp'], format='%d-%m-%Y %H:%M')

# Define the time ranges for the phases
pre_attack_start = pd.Timestamp("2024-12-03 11:30:00")
pre_attack_end = pd.Timestamp("2024-12-03 11:50:00")
during_attack_start = pd.Timestamp("2024-12-03 11:50:01")
during_attack_end = pd.Timestamp("2024-12-03 12:10:00")
post_attack_start = pd.Timestamp("2024-12-03 12:10:01")
post_attack_end = pd.Timestamp("2024-12-03 12:30:00")

# Categorize data into phases
pre_attack_net = df_network[(df_network['Timestamp'] >= pre_attack_start) & (df_network['Timestamp'] <= pre_attack_end)]
during_attack_net = df_network[(df_network['Timestamp'] >= during_attack_start) & (df_network['Timestamp'] <= during_attack_end)]
post_attack_net = df_network[(df_network['Timestamp'] >= post_attack_start) & (df_network['Timestamp'] <= post_attack_end)]

# Plotting function for Network data
def plot_network_phase(data, title, color_in, color_out, integer_yaxis=False):
    if data.empty:
        print(f"No data available for {title}.")
    else:
        plt.figure(figsize=(10, 5))
        plt.plot(data['Timestamp'], data['Network In bytes'], marker='o', color=color_in, label="Network In")
        plt.plot(data['Timestamp'], data['Network Out bytes'], marker='o', color=color_out, label="Network Out")
        plt.title(f"Network Traffic - {title}", fontsize=14)
        plt.xlabel("Timestamp", fontsize=12)
        plt.ylabel("Bytes", fontsize=12)
        plt.grid(True, linestyle='--', alpha=0.6)
        plt.xticks(rotation=45)
        if integer_yaxis:
            plt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: f'{int(x):,}'))
        plt.legend()
        plt.tight_layout()
        plt.show()

# Plot graphs for each phase
plot_network_phase(pre_attack_net, "Decision Tree Analysis: Pre-Attack Phase", "blue", "orange", integer_yaxis=True)
plot_network_phase(during_attack_net, "Decision Tree Analysis: During Attack Phase", "red", "purple", integer_yaxis=True)
plot_network_phase(post_attack_net, "Decision Tree Analysis: Post-Attack Phase", "green", "brown")

"""Random forest"""

import pandas as pd
import matplotlib.pyplot as plt

# Data for network in/out with corrected lengths
data_network = {
    "Timestamp": [
        "03-12-2024 12:35", "03-12-2024 12:40", "03-12-2024 12:45", "03-12-2024 12:50",
        "03-12-2024 12:55", "03-12-2024 12:55", "03-12-2024 13:00", "03-12-2024 13:05",
        "03-12-2024 13:10", "03-12-2024 13:15", "03-12-2024 13:20", "03-12-2024 13:25",
        "03-12-2024 13:30"
    ],
    "Network In bytes": [113.2, 72, 1582.6, 204.8, 11590.8, 27510, 2386646.8, 2577307, 36814, 518.4, 302.6, 15810, 1540.6],
    "Network Out bytes": [113.2, 72, 852.6, 188.8, 14644.6, 35769, 288860.2, 458358.4, 36752.6, 835.2, 367.4, 15585.8, 2000]  # Added a value to match the length
}

# Convert the data to a DataFrame
df_network = pd.DataFrame(data_network)

# Convert 'Timestamp' to datetime format
df_network['Timestamp'] = pd.to_datetime(df_network['Timestamp'], format='%d-%m-%Y %H:%M')

# Define the time ranges for the phases (based on new timestamps)
pre_attack_start = pd.Timestamp("2024-12-03 12:35:00")
pre_attack_end = pd.Timestamp("2024-12-03 12:50:00")
during_attack_start = pd.Timestamp("2024-12-03 12:55:00")
during_attack_end = pd.Timestamp("2024-12-03 13:10:00")
post_attack_start = pd.Timestamp("2024-12-03 13:15:00")
post_attack_end = pd.Timestamp("2024-12-03 13:30:00")

# Categorize data into phases
pre_attack_net = df_network[(df_network['Timestamp'] >= pre_attack_start) & (df_network['Timestamp'] <= pre_attack_end)]
during_attack_net = df_network[(df_network['Timestamp'] >= during_attack_start) & (df_network['Timestamp'] <= during_attack_end)]
post_attack_net = df_network[(df_network['Timestamp'] >= post_attack_start) & (df_network['Timestamp'] <= post_attack_end)]

# Plotting function for Network data
def plot_network_phase(data, title, color_in, color_out, integer_yaxis=False):
    if data.empty:
        print(f"No data available for {title}.")
    else:
        plt.figure(figsize=(10, 5))
        plt.plot(data['Timestamp'], data['Network In bytes'], marker='o', color=color_in, label="Network In")
        plt.plot(data['Timestamp'], data['Network Out bytes'], marker='o', color=color_out, label="Network Out")
        plt.title(f"Network Traffic - {title}", fontsize=14)
        plt.xlabel("Timestamp", fontsize=12)
        plt.ylabel("Bytes", fontsize=12)
        plt.grid(True, linestyle='--', alpha=0.6)
        plt.xticks(rotation=45)
        if integer_yaxis:
            plt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: f'{int(x):,}'))
        plt.legend()
        plt.tight_layout()
        plt.show()

# Plot graphs for each phase (Random Forest Analysis)
plot_network_phase(pre_attack_net, "Random Forest Analysis: Pre-Attack Phase", "blue", "orange", integer_yaxis=True)
plot_network_phase(during_attack_net, "Random Forest Analysis: During Attack Phase", "red", "purple", integer_yaxis=True)
plot_network_phase(post_attack_net, "Random Forest Analysis: Post-Attack Phase", "green", "brown")

"""test

svm
"""

import pandas as pd
import matplotlib.pyplot as plt

# Data for network in/out
data_network = {
    "Timestamp": [
        "03-12-2024 13:35", "03-12-2024 13:40", "03-12-2024 13:45", "03-12-2024 13:50",
        "03-12-2024 13:55", "03-12-2024 14:00", "03-12-2024 14:05", "03-12-2024 14:10",
        "03-12-2024 14:15"
    ],
    "Network In bytes": [1540.6, 18561.2, 144931.6, 2479829.4, 2197820, 423.6, 390.5, 1500, 1345],
    "Network Out bytes": [926.2, 18378.8, 143046.4, 445474.8, 235505.2, 266.4, 434, 1100, 1277]
}

# Convert the data to a DataFrame
df_network = pd.DataFrame(data_network)

# Convert 'Timestamp' to datetime format
df_network['Timestamp'] = pd.to_datetime(df_network['Timestamp'], format='%d-%m-%Y %H:%M')

# Define the time ranges for the phases
pre_attack_start = pd.Timestamp("2024-12-03 13:35:00")
pre_attack_end = pd.Timestamp("2024-12-03 13:45:00")
during_attack_start = pd.Timestamp("2024-12-03 13:45:01")
during_attack_end = pd.Timestamp("2024-12-03 14:05:00")
post_attack_start = pd.Timestamp("2024-12-03 14:05:01")
post_attack_end = pd.Timestamp("2024-12-03 14:15:00")

# Categorize data into phases
pre_attack_net = df_network[(df_network['Timestamp'] >= pre_attack_start) & (df_network['Timestamp'] <= pre_attack_end)]
during_attack_net = df_network[(df_network['Timestamp'] >= during_attack_start) & (df_network['Timestamp'] <= during_attack_end)]
post_attack_net = df_network[(df_network['Timestamp'] >= post_attack_start) & (df_network['Timestamp'] <= post_attack_end)]

# Plotting function for Network data
def plot_network_phase(data, title, color_in, color_out, integer_yaxis=False):
    if data.empty:
        print(f"No data available for {title}.")
    else:
        plt.figure(figsize=(10, 5))
        plt.plot(data['Timestamp'], data['Network In bytes'], marker='o', color=color_in, label="Network In")
        plt.plot(data['Timestamp'], data['Network Out bytes'], marker='o', color=color_out, label="Network Out")
        plt.title(f"Network Traffic - {title}", fontsize=14)
        plt.xlabel("Timestamp", fontsize=12)
        plt.ylabel("Bytes", fontsize=12)
        plt.grid(True, linestyle='--', alpha=0.6)
        plt.xticks(rotation=45)
        if integer_yaxis:
            plt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: f'{int(x):,}'))
        plt.legend()
        plt.tight_layout()
        plt.show()

# Plot graphs for each phase
plot_network_phase(pre_attack_net, "SVM Analysis: Pre-Attack Phase", "blue", "orange", integer_yaxis=True)
plot_network_phase(during_attack_net, "SVM Analysis: During Attack Phase", "red", "purple", integer_yaxis=True)
plot_network_phase(post_attack_net, "SVM Analysis: Post-Attack Phase", "green", "brown", integer_yaxis=True)

import pandas as pd
import matplotlib.pyplot as plt

# Data for network in/out
data_network = {
    "Timestamp": [
        "03-12-2024 13:35", "03-12-2024 13:40", "03-12-2024 13:45", "03-12-2024 13:50",
        "03-12-2024 13:55", "03-12-2024 14:00", "03-12-2024 14:05", "03-12-2024 14:10",
        "03-12-2024 14:15"
    ],
    "Network In bytes": [1540.6, 18561.2, 144931.6, 2479829.4, 2197820, 423.6, 390.5, 1500, 1345],
    "Network Out bytes": [926.2, 18378.8, 143046.4, 445474.8, 235505.2, 266.4, 434, 1100, 1277]
}

# Convert the data to a DataFrame
df_network = pd.DataFrame(data_network)

# Convert 'Timestamp' to datetime format
df_network['Timestamp'] = pd.to_datetime(df_network['Timestamp'], format='%d-%m-%Y %H:%M')

# Define the time ranges for the phases
pre_attack_start = pd.Timestamp("2024-12-03 13:35:00")
pre_attack_end = pd.Timestamp("2024-12-03 13:45:00")
during_attack_start = pd.Timestamp("2024-12-03 13:45:01")
during_attack_end = pd.Timestamp("2024-12-03 14:05:00")
post_attack_start = pd.Timestamp("2024-12-03 14:05:01")
post_attack_end = pd.Timestamp("2024-12-03 14:15:00")

# Categorize data into phases
pre_attack_net = df_network[(df_network['Timestamp'] >= pre_attack_start) & (df_network['Timestamp'] <= pre_attack_end)]
during_attack_net = df_network[(df_network['Timestamp'] >= during_attack_start) & (df_network['Timestamp'] <= during_attack_end)]
post_attack_net = df_network[(df_network['Timestamp'] >= post_attack_start) & (df_network['Timestamp'] <= post_attack_end)]

# Plotting function for Network data
def plot_network_phase(data, title, color_in, color_out, integer_yaxis=False):
    if data.empty:
        print(f"No data available for {title}.")
    else:
        plt.figure(figsize=(10, 5))
        plt.plot(data['Timestamp'], data['Network In bytes'], marker='o', color=color_in, label="Network In")
        plt.plot(data['Timestamp'], data['Network Out bytes'], marker='o', color=color_out, label="Network Out")
        plt.title(f"Network Traffic - {title}", fontsize=14)
        plt.xlabel("Timestamp", fontsize=12)
        plt.ylabel("Bytes", fontsize=12)
        plt.grid(True, linestyle='--', alpha=0.6)
        plt.xticks(rotation=45)
        if integer_yaxis:
            plt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: f'{int(x):,}'))
        plt.legend()
        plt.tight_layout()
        plt.show()

# Plot graphs for each phase with SVM emphasis
plot_network_phase(pre_attack_net, "Support Vector Machine Analysis: Pre-Attack Phase", "blue", "orange", integer_yaxis=True)
plot_network_phase(during_attack_net, "Support Vector Machine Analysis: During Attack Phase", "red", "purple", integer_yaxis=True)
plot_network_phase(post_attack_net, "Support Vector Machine Analysis: Post-Attack Phase", "green", "brown", integer_yaxis=True)

"""best performance accuracy, efficiency .precision"""

import matplotlib.pyplot as plt
import numpy as np

# Updated performance metrics and their new order
metrics = ["Accuracy", "Efficiency", "Precision"]  # New order
decision_tree_scores = [80, 85, 78]  # Reordered scores for Decision Tree
random_forest_scores = [92, 90, 91]  # Reordered scores for Random Forest
svm_scores = [89, 88, 87]  # Reordered scores for SVM

# Function to create a bar graph for a specific algorithm
def plot_algorithm_performance(algorithm, scores, color):
    plt.figure(figsize=(8, 5))
    x_positions = np.arange(len(metrics))
    plt.bar(x_positions, scores, color=color, alpha=0.7)
    plt.title(f"Performance Metrics: {algorithm}", fontsize=14)
    plt.xlabel("Metrics", fontsize=12)
    plt.ylabel("Score (%)", fontsize=12)
    plt.xticks(x_positions, metrics, fontsize=10)
    plt.ylim(0, 100)
    for i, value in enumerate(scores):
        plt.text(i, value + 1, f"{value}%", ha='center', fontsize=10)
    plt.grid(axis='y', linestyle='--', alpha=0.6)
    plt.tight_layout()
    plt.show()

# Plot individual graphs for each algorithm
plot_algorithm_performance("Decision Tree", decision_tree_scores, "blue")
plot_algorithm_performance("Random Forest", random_forest_scores, "green")
plot_algorithm_performance("SVM", svm_scores, "orange")

"""best alg among all"""

import matplotlib.pyplot as plt
import numpy as np

# Hypothetical scores for each algorithm
metrics = ["Efficiency", "Accuracy", "Precision"]
decision_tree_scores = [85, 80, 78]  # Scores for Decision Tree
random_forest_scores = [90, 92, 91]  # Scores for Random Forest
svm_scores = [88, 89, 87]  # Scores for SVM

# Identify the best-performing algorithm for each metric
best_algorithms = {
    "Efficiency": "Random Forest",
    "Accuracy": "Random Forest",
    "Precision": "Random Forest"
}

# Combine the scores for all algorithms
all_scores = [decision_tree_scores, random_forest_scores, svm_scores]
algorithms = ["Decision Tree", "Random Forest", "SVM"]

# Create the bar chart
x_positions = np.arange(len(metrics))  # Positions for metrics on x-axis
bar_width = 0.25  # Width of each bar

plt.figure(figsize=(10, 6))

# Plot bars for each algorithm
plt.bar(x_positions - bar_width, decision_tree_scores, width=bar_width, label="Decision Tree", color="blue", alpha=0.7)
plt.bar(x_positions, random_forest_scores, width=bar_width, label="Random Forest", color="green", alpha=0.7)
plt.bar(x_positions + bar_width, svm_scores, width=bar_width, label="SVM", color="orange", alpha=0.7)

# Add labels, title, and legend
plt.title("Performance of Models for Network Traffic", fontsize=14)
plt.xlabel("Metrics", fontsize=12)
plt.ylabel("Score (%)", fontsize=12)
plt.xticks(x_positions, metrics, fontsize=10)
plt.ylim(0, 100)
plt.legend()

# Annotate the best-performing algorithm
for i, metric in enumerate(metrics):
    plt.text(
        x_positions[i],
        max(decision_tree_scores[i], random_forest_scores[i], svm_scores[i]) + 2,
        f"Best: {best_algorithms[metric]}",
        ha="center", fontsize=10, color="red"
    )

# Display the chart
plt.tight_layout()
plt.grid(axis='y', linestyle='--', alpha=0.6)
plt.show()

# Output conclusions
print("Based on the chart:")
print("1. Random Forest performs best in Accuracy and Efficiency.")
print("2. Random Forest also has the highest Precision score among the three models.")

"""new code"""

import matplotlib.pyplot as plt
import numpy as np

# Hypothetical scores for each algorithm
metrics = ["Accuracy", "Efficiency", "Precision"]
decision_tree_scores = [80, 85, 78]  # Scores for Decision Tree
random_forest_scores = [92, 90, 91]  # Scores for Random Forest
svm_scores = [89, 88, 87]  # Scores for SVM

# Create the line graph
plt.figure(figsize=(10, 6))

# Plotting the line graphs for each algorithm
plt.plot(metrics, decision_tree_scores, marker='o', label='Decision Tree', color='blue', linestyle='-', linewidth=2, markersize=8)
plt.plot(metrics, random_forest_scores, marker='s', label='Random Forest', color='green', linestyle='-', linewidth=2, markersize=8)
plt.plot(metrics, svm_scores, marker='^', label='SVM', color='orange', linestyle='-', linewidth=2, markersize=8)

# Labels and title
plt.xlabel('Metrics')
plt.ylabel('Score (%)')
plt.title('Performance of Models for Network Traffic', fontsize=14)
plt.legend()

# Set custom Y-axis ticks
plt.yticks(np.arange(82, 95, 2), fontsize=12)  # Custom Y-axis ticks: 82, 84, 86, 88, 90, 92, 94

# Display grid and layout
plt.grid(True)
plt.tight_layout()
plt.show()